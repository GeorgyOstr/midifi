header fluid_header = '''
// I could do all this in Felix, but it'd be a LOT of mostly useless bindings.

#include <fluidsynth.h>
extern "C" {
#include <fluid_midi.h>
fluid_midi_event_t* new_fluid_midi_event();
}

extern unsigned int midifi_ms;
extern "C" int midifi_fluid_callback(void* data, unsigned int ms);

struct MidifiFluidData {
    MidifiFluidData(std::string path, std::string sf, int tpq, int num,
                    float deltatime, void* ptf);
    ~MidifiFluidData();
    bool playing();
    bool paused();
    void play();
    void pause();
    void setup_ticks();

    std::string path;
    int tpq, num;
    float deltatime;
    void* ptf;
    bool playback_paused;
    fluid_settings_t* settings;
    fluid_sequencer_t* sequencer;
    fluid_synth_t* synth;
    fluid_player_t* player;
    fluid_audio_driver_t* audio_driver;
};

FLX_FINALISER(MidifiFluidData)
''' requires package 'fluid';


body fluid_body = '''
unsigned int midifi_ms = 0;

static int ms_offset = 0;


extern "C" int midifi_fluid_callback(void* vplayer, unsigned int ms) {
    midifi_ms = ms+ms_offset;

    fluid_player_t* player = static_cast<fluid_player_t*>(vplayer);
    if (player->currentfile == NULL) {
        player->currentfile = player->playlist;
        player->begin_msec = player->start_msec = player->start_ticks =
            player->cur_ticks = 0;
    }
    return fluid_player_callback(vplayer, midifi_ms);
}

extern "C" int midifi_event_callback(void* vdata, fluid_midi_event_t* event) {
    MidifiFluidData* data = static_cast<MidifiFluidData*>(vdata);
    int type = fluid_midi_event_get_type(event);
    if (type == NOTE_ON || type == NOTE_OFF)
        midifi_flx_event_callback(static_cast<thread_frame_t*>(data->ptf),
                                  type == NOTE_ON &&
                                      fluid_midi_event_get_velocity(event) != 0,
                                  fluid_midi_event_get_key(event));
    return fluid_synth_handle_midi_event(data->synth, event);
}


MidifiFluidData::MidifiFluidData(std::string path, std::string sf, int tpq,
    int num, float deltatime, void* ptf):
    path(path), tpq(tpq), num(num), deltatime(deltatime), ptf(ptf),
    playback_paused(false) {
    settings = new_fluid_settings();
    char* adriver;
    fluid_settings_getstr(settings, "audio.driver", &adriver);
    if (strcmp(adriver, "jack") == 0)
        // JACK can be really finicky, so we always try Pulseaudio (ALSA sucks).
        fluid_settings_setstr(settings, "audio.driver", "pulseaudio");
    // XXX: This should probably be an option!
    fluid_settings_setstr(settings, "player.timing-source", "system");
    synth = new_fluid_synth(settings);
    if (fluid_synth_sfload(synth, sf.c_str(), 1) == FLUID_FAILED) {
        std::cerr << "Cannot open soundfont data!\\n";
        exit(1);
    }

    player = new_fluid_player(synth);
    fluid_player_set_playback_callback(player, midifi_event_callback, this);
    assert(player->use_system_timer);
    setup_ticks();
    fluid_player_add(player, path.c_str());
    audio_driver = new_fluid_audio_driver(settings, synth);
}

bool MidifiFluidData::playing() { return player->status == FLUID_PLAYER_PLAYING; }
bool MidifiFluidData::paused() { return playback_paused; }

void MidifiFluidData::play() {
    if (playing()) return;
    midifi_ms = 0;
    if (paused()) playback_paused = false;
    else ms_offset = 0;
    player->status = FLUID_PLAYER_PLAYING;
    player->system_timer = new_fluid_timer(static_cast<int>(player->deltatime),
                                           midifi_fluid_callback,
                                           static_cast<void*>(player), 1, 0, 0);
    assert(player->system_timer); // XXX: This should handle errors. Stupid C API.
}

void MidifiFluidData::pause() {
    playback_paused = true;
    delete_fluid_timer(player->system_timer);
    player->system_timer = NULL;
    player->status = FLUID_PLAYER_DONE;
    ms_offset = midifi_ms;
}

void MidifiFluidData::setup_ticks() {
    fluid_track_t* track = new_fluid_track(fluid_player_count_tracks(player));
    int weak_note=33, strong_note=34;

    for (int i=0; i<num; ++i) {
        unsigned int note = i \? weak_note : strong_note;

        fluid_midi_event_t* event = new_fluid_midi_event();
        event->type = NOTE_ON;
        event->channel = 9;
        event->dtime = 0;
        event->param1 = note;
        event->param2 = 100;
        fluid_track_add_event(track, event);

        event = new_fluid_midi_event();
        event->type = NOTE_OFF;
        event->channel = 9;
        event->dtime = tpq/4*deltatime-1;
        event->param1 = note;
        event->param2 = 0;
        fluid_track_add_event(track, event);
    }

    assert(fluid_player_add_track(player, track) == FLUID_OK);
}

MidifiFluidData::~MidifiFluidData() {
    delete_fluid_audio_driver(audio_driver);
    delete_fluid_player(player);
    delete_fluid_synth(synth);
    delete_fluid_sequencer(sequencer);
    delete_fluid_settings(settings);
}
''';


type FluidData = 'MidifiFluidData*' requires
    finaliser 'MidifiFluidData_finaliser', fluid_header, fluid_body;
ctor FluidData: string * string * int * int * float =
    'new MidifiFluidData($1, $2, $3, $4, $5, FLX_POINTER_TO_THREAD_FRAME)';
proc play: FluidData = '$1->play();';
proc pause: FluidData = '$1->pause();';
fun playing: FluidData -> bool = '$1->playing()';
fun paused: FluidData -> bool = '$1->paused()';

gen ms: 1 -> uint = 'midifi_ms';
