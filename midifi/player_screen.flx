include 'stl/stl_vector';

rename fun mkvec[T] = Stl_Vector::create[T];
// XXX: Not type-safe in the Felix world!
proc set_vec_iterator[I,T]: I * T = '*$1 = $2;';


fun key_number_info(k: int) =>
    let base = k - 24 in
    base / 12, keys.(size$ base % 12);


fun x_offset(octave: int, k: Key) =>
    let base_x = octave.float * values.octave_width +
                 k.d.float * values.white_key_width in
    if k.is_sharp
    then base_x + values.white_key_width - values.black_key_width / 2.0f
    else base_x endif;


struct NoteFall {
    view: &View;
    tracks: stl_vector[stl_vector[RectangleShape]];
}

ctor NoteFall(midi: MidiFile::MidiFile) = {
    view := View$ FloatRect (0.0f, 0.0f, values.window_width.float,
                             values.window_height.float);
    self := NoteFall (new view, #mkvec[stl_vector[RectangleShape]]);
    midi.link_note_pairs;

    bottom := 0.0f;

    for var ti in 0 upto midi.ntracks - 1 do
        track := #mkvec[RectangleShape];

        evtloop:for var ei in 0 upto (midi.nevents ti) - 1 do
            event := midi.[ti.size].[ei.size];

            if event.is_note_on and event.is_linked do
                kn := event.key_number;
                if kn < 24 continue evtloop; // XXX: This ignores A0-B0.

                var octave, key = kn.key_number_info;
                xpos := x_offset (octave, key);
                ypos := event.tick.float * values.tick_height;

                r_height := event.tick_duration.float * values.tick_height;
                r_width := key.width;

                r := RectangleShape$ Vector2f (r_width, r_height);
                r.move (xpos, ypos);
                r.set_fill_color Colors::Blue;
                r.set_outline_color Colors::Black;
                r.set_outline_thickness values.line_width;

                push_back (track, r);

                bottom = max (bottom, ypos + r_height);
            done
        done

        push_back (self.tracks, track);
    done

    // We need to now flip all the tracks upside-down.

    initial_space := 4.0f * midi.tpq.float * values.tick_height;
    // XXX: Work around optimizing (see comment in draw_onto).
    view = *self.view;
    view.set_center$ Vector2f (0.0f, bottom + initial_space);
    *self.view = view;

    return self;
}

proc draw_onto(self: NoteFall, w: RenderWindow) {
    /*
       XXX: This is to get around Felix optimizing-out a bunch of stuff that
       cause the view to NEVER MOVE.
    */
    v := *self.view;
    v.set_center$ v.center - Vector2f (0.0f, 0.5f);
    w.set_view v;
    *self.view = v;

    for (var ti = self.tracks.begin; ti != self.tracks.end; ++ti;) perform
        for (var ni = (*ti).begin; ni != (*ti).end; ++ni;) perform
            w.draw$ *ni;

    w.set_view w.default_view;
}


struct Keyboard {
    white_keys: stl_vector[RectangleShape];
    black_keys: stl_vector[RectangleShape];
}

ctor Keyboard() = {
    self := Keyboard (#mkvec[RectangleShape], #mkvec[RectangleShape]);

    root:for var octave in 0 upto values.octaves_to_show perform
        for key in keys do
            xpos := x_offset (octave, key);
            ypos := values.window_height.float - values.white_key_height;
            r := RectangleShape$ Vector2f (key.width, key.height);
            r.move (xpos, ypos);

            if key.is_sharp do
                r.set_fill_color Colors::Black;
                push_back (self.black_keys, r);
            else
                r.set_fill_color Colors::White;
                r.set_outline_color Colors::Black;
                r.set_outline_thickness values.line_width;
                push_back (self.white_keys, r);
            done

            // Only one C is shown at the last octave.
            if key.is_c and octave == values.octaves_to_show break root;
        done

    return self;
}

proc draw_onto(self: Keyboard, w: RenderWindow) {
    for (var ki = self.white_keys.begin; ki != self.white_keys.end; ++ki;) perform
        w.draw$ *ki;

    for (ki = self.black_keys.begin; ki != self.black_keys.end; ++ki;) perform
        w.draw$ *ki;
}


struct PlayerScreen {
    n: NoteFall;
    kb: Keyboard;
}

ctor PlayerScreen(midi: MidiFile::MidiFile) =>
    PlayerScreen (NoteFall midi, #Keyboard);

proc draw_onto(self: PlayerScreen, w: RenderWindow) {
    draw_onto (self.n, w);
    draw_onto (self.kb, w);
}
