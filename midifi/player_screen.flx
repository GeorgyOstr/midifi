include 'stl/stl_vector';

rename fun mkvec[T] = Stl_Vector::create[T];


// DO NOT PASS A0-B0!!!
fun fixed_key_number(k: int) => k - 24;

fun key_number_info(k: int) =>
    let k' = k.fixed_key_number in
    k' / 12, keys.(size$ k' % 12);


fun x_offset(octave: int, k: Key) =>
    let base_x = octave.float * values.octave_width +
                 k.d.float * values.white_key_width in
    if k.is_sharp
    then base_x + values.white_key_width - values.black_key_width / 2.0f
    else base_x endif;


track_colors := varray[Color] (
    Colors::Yellow,
    Colors::Red,
    Colors::Green,
    Colors::Blue
);


// We can't initialize these here because values hasn't been created yet.
var currently_pressed_keys: varray[int];
numerator := 0;
deltatime := 0.0f;
initial_ms := 0.0f;


proc event_callback(is_on: bool, key: short) {
    if key < 24s return;
    key' := key.int.fixed_key_number;
    i := let cur = unsafe_get (currently_pressed_keys, key'.size) in
         if is_on then cur + 1 else cur - 1 endif;
    unsafe_set (currently_pressed_keys, key'.size, i);
}

export proc event_callback of (bool * short) as 'midifi_flx_event_callback';


fun seconds_to_ms(sec: double) => sec * 1000.0;


fun is_timesig(event: MidiEvent) =>
    event.is_meta and event.[1zu] == 0x58ut and event.[2zu] == 0x04ut;


fun ms_to_str(ms: uint) =>
    let sec = ms.float / 1000.0f in
    f"%d:%S" ((sec / 60.0f).int, (sec % 60.0f).str);


struct Progress {
    last_ms: float;
    begin_msec: float;
    finished: RectangleShape;
    left: RectangleShape;
    finished_time: Text;
    total_time: Text;
}

ctor Progress(last_ms: float, begin_msec: float) = {
    var finished = RectangleShape$ Vector2f (0.0f, values.progress_height);
    var left = RectangleShape$ Vector2f (values.window_width.float,
                                         values.progress_height);
    finished&.set_fill_color$ values.dark_green - values.darken_color;
    left&.set_fill_color$ Colors::White - values.darken_color;

    finished&.set_outline_color Colors::Black;
    finished&.set_outline_thickness values.line_width;

    left&.set_outline_color Colors::Black;
    left&.set_outline_thickness values.line_width;

    var finished_time = #Text;
    var total_time = #Text;
    forall time in finished_time, total_time do
        time&.set_font font;
        time&.set_color Colors::Black;
        time&.set_character_size values.progress_time_height.uint;
        time&.set_position values.time_draw_pos;
    done

    total_time&.set_string last_ms.uint.ms_to_str;
    total_time&.set_position (values.window_width.float - values.time_draw_pos.x -
                              total_time.local_bounds.width,
                              values.time_draw_pos.y);

    return Progress (last_ms, begin_msec, finished, left, finished_time,
                     total_time);
}

proc draw_onto(self: &Progress, w: RenderWindow) {
    new_width := (#ms.float / self*.last_ms) * values.window_width.float;
    if new_width < values.window_width.float perform
        self.finished.set_size$ Vector2f (new_width, values.progress_height);

    finished_ms := #ms;

    if finished_ms < initial_ms.uint do
        self.finished_time.set_string '0:00';
    else
        self.finished_time.set_string (finished_ms - initial_ms.uint).ms_to_str;
    done

    w.draw self*.left;
    w.draw self*.finished;
    w.draw self*.finished_time;
    w.draw self*.total_time;
}


struct NoteFall {
    view: View;
    bottom: float;
    last_ms: float;
    begin_msec: float;
    tracks: stl_vector[stl_vector[RectangleShape]];
}

ctor NoteFall(midi: MidiFile::MidiFile) = {
    view := View$ FloatRect (0.0f, 0.0f, values.window_width.float,
                             values.window_height.float);
    self := NoteFall (view, 0.0f, 0.0f, 0.0f, #mkvec[stl_vector[RectangleShape]]);
    midi.link_note_pairs;
    midi.do_time_analysis;

    first_event := None[MidiEvent];

    numerator = 0;

    for var tn in 0 upto midi.ntracks - 1 do
        track := #mkvec[RectangleShape];
        color := track_colors.((midi.ntracks + tn).size % track_colors.len);

        evtloop:for var en in 0 upto (midi.nevents tn) - 1 do
            event := midi.[tn.size].[en.size];

            if event.is_note_on and event.is_linked do
                if (match first_event with
                        | Some evt => event.seconds < evt.seconds
                        | #None    => true
                    endmatch) perform first_event = Some event;

                kn := event.key_number;
                if kn < 24 continue evtloop; // XXX: This ignores A0-B0.

                var octave, key = kn.key_number_info;
                start_ms := event.seconds.seconds_to_ms;
                dur_ms := event.duration_in_seconds.seconds_to_ms;

                xpos := x_offset (octave, key);
                ypos := start_ms.float * values.ms_height;

                r_height := dur_ms.float * values.ms_height;
                r_width := key.width;

                if key.follows_sharp do
                    r_width = r_width - values.black_key_width / 2.0f;
                    xpos = xpos + values.black_key_width / 2.0f;
                done

                if key.precedes_sharp perform
                    r_width = r_width - values.black_key_width / 2.0f;

                var r = RectangleShape$ Vector2f (r_width, r_height);
                r&.set_position (xpos, ypos);
                r&.set_fill_color
                    if key.is_sharp then color - values.darken_color
                    else color endif;
                r&.set_outline_color Colors::Black;
                r&.set_outline_thickness values.line_width;

                push_back (track, r);

                self.bottom = max (self.bottom, ypos + r_height);
                self.last_ms = max (self.last_ms, start_ms.float + dur_ms.float);

            elif event.is_timesig and numerator == 0 do
                numerator = event.[3zu].int;
            done
        done

        push_back (self.tracks, track);
    done

    deltatime = match first_event with
        | Some event => event.duration_in_seconds.seconds_to_ms.float /
                        event.tick_duration.float
        | #None => 1.0f
    endmatch;

    // We need to now flip all the tracks upside-down.
    for (var ti = self.tracks.begin; ti != self.tracks.end; ++ti;) perform
        for (var ni = (*ti).begin; ni != (*ti).end; ++ni;) do
            var rx = cexpr[&RectangleShape] '&*$1' ni endcexpr;
            rx.set_position (rx*.position.x, self.bottom - rx*.position.y -
                             rx*.rsize.y);
        done

    initial_ms = numerator.float * deltatime * midi.tpq.float;
    initial_space := initial_ms * values.ms_height;
    self.bottom = self.bottom + initial_space;
    self.begin_msec = numerator.float * deltatime * midi.tpq.float;
    self.last_ms = self.last_ms + self.begin_msec;

    return self;
}

proc draw_onto(self: &NoteFall, w: RenderWindow) {
    space_bottom := values.window_height.float / 2.0f - values.white_key_height;
    self.view.set_center$ Vector2f (self*.view.center.x, self*.bottom -
                                    space_bottom - #ms.float * values.ms_height);
    w.set_view self*.view;

    for (var ti = self*.tracks.begin; ti != self*.tracks.end; ++ti;) perform
        for (var ni = (*ti).begin; ni != (*ti).end; ++ni;) perform
            w.draw$ *ni;

    w.set_view w.default_view;
}


struct Keyboard {
    white_keys: stl_vector[int * RectangleShape];
    black_keys: stl_vector[int * RectangleShape];
}

ctor Keyboard() = {
    self := Keyboard (#mkvec[int * RectangleShape], #mkvec[int * RectangleShape]);

    currently_pressed_keys = varray[int] (values.keys_to_show.size, 0);

    root:for var octave in 0 upto values.octaves_to_show perform
        for var ki in 0 upto values.keys_per_octave - 1 do
            key := keys.ki;
            index := (octave * values.keys_per_octave) + ki;
            xpos := x_offset (octave, key);
            ypos := values.window_height.float - values.white_key_height;
            var r = RectangleShape$ Vector2f (key.width, key.height);
            r&.set_position (xpos, ypos);

            if key.is_sharp do
                r&.set_fill_color Colors::Black;
                push_back (self.black_keys, (index, r));
            else
                r&.set_fill_color Colors::White;
                r&.set_outline_color Colors::Black;
                r&.set_outline_thickness values.line_width;
                push_back (self.white_keys, (index, r));
            done

            // Only one C is shown at the last octave.
            if key.is_c and octave == values.octaves_to_show break root;
        done

    return self;
}

// The `var r` is very important!
proc draw_key(index: int, var r: RectangleShape, w: RenderWindow, black: bool) {
    default_color := if black then Colors::Black else Colors::White endif;
    if #ms < initial_ms.uint do
        r&.set_fill_color default_color;
    elif unsafe_get (currently_pressed_keys, index.size) > 0 do
        r&.set_fill_color Colors::Red;
    else
        r&.set_fill_color default_color;
    done

    w.draw r;
}

proc draw_onto(self: &Keyboard, w: RenderWindow) {
    for (var ki = self*.white_keys.begin; ki != self*.white_keys.end; ++ki;)
        perform draw_key ((*ki).0, (*ki).1, w, false);

    for (ki = self*.black_keys.begin; ki != self*.black_keys.end; ++ki;) perform
        draw_key ((*ki).0, (*ki).1, w, true);
}


struct PlayerScreen {
    p: &Progress;
    n: &NoteFall;
    kb: &Keyboard;
}

ctor PlayerScreen(midi: MidiFile::MidiFile) =>
    let nf = NoteFall midi in
    PlayerScreen (new Progress (nf.last_ms, nf.begin_msec), new nf,
                  new #Keyboard);

proc draw_onto(self: PlayerScreen, w: RenderWindow) {
    draw_onto (self.n, w);
    draw_onto (self.kb, w);
    draw_onto (self.p, w);
}
