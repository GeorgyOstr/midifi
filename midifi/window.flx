/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var fluid: FluidData;
var font: Font;

gen error_msg: unit -> string = '::std::string(strerror(errno))';
fun /(l: string, r: string) => Filename::join (l, r);
fun %: float * float -> float = 'fmod($1, $2)'
    requires header '#include <math.h>';


union Action =
    | Anothing
    | Aclose
;


object RootWindow() = {
    midi := #MidiFile::MidiFile;
    this := Filename::dirname$ System::argv 0;
    if System::argc == 2 do path := System::argv 1;
    else
        eprintln$ f"usage: %S <midi file to play>" (System::argv 0);
        System::exit 1;
    done

    if midi.read path == 0 do
        eprintln$ f"Error opening %S: %S" (path, #error_msg);
        System::exit 1;
    done

    ps := PlayerScreen midi;
    // XXX: Custom soundfonts should probably be an option.
    fluid = FluidData (path, this/'data'/'FluidR3_GM.sf2', midi.tpq, numerator,
                       deltatime);

    // XXX: The parens here are due to felix-lang/felix#77.
    font = #Font;
    if not (font&.load_from_file$ this/'data'/'Arial.ttf') do
        eprintln 'Cannot open font data!!\n';
        System::exit 1;
    done

    w := RenderWindow (values.video_mode, 'midifi', Style::Fullscreen);
    show_fps := Env::getenv 'SHOWFPS' == 'true';

    // For older Felix versions.
    proc cstmt(s: string) {}
    fun endcexpr(i: int) => i;
    fun cexpr[T](s: string)(f: int -> int) => 0.0f;

    method proc run() {
        fluid.play;

        cstmt 'sf::Clock fpsc;';

        while w.isopen do
            var event: Event;
            while w.poll_event &event perform
                if event.etype == EventType::Closed do
                    w.close;
                    return;
                elif event.etype == EventType::KeyPressed do
                    if event.key.kcode == KeyCodes::Space do
                        if fluid.paused do fluid.play;
                        else fluid.pause; done
                    done
                elif event.etype == EventType::MouseButtonPressed do
                    if event.mouse_button.button == Buttons::Left do
                        action := handle_click (ps, event.mouse_button);
                        match action with
                            | #Anothing => ;
                            | #Aclose =>
                                w.close;
                                return;
                        endmatch;
                    done
                done

            if not (fluid.playing or fluid.paused) do
                w.close;
                return;
            done

            if show_fps do
                fps := cexpr[float]
                    '1000000.0f / fpsc.restart().asMicroseconds()'
                endcexpr;
                print$ f"FPS: %S\r" fps.str;
            done

            w.clear values.gray_color;
            draw_onto (ps, w);
            w.display;
        done
    }
}
